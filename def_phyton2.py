# -*- coding: utf-8 -*-
"""def_Phyton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fFeD66Bdl-TQ60DUY56aIxSoSeRiZmdV
"""

def mediana_idades(idade1, idade2, idade3):
    idades = [idade1, idade2, idade3]
    idades.sort()
    return idades[1]
idade1 = int(input("Digite a primeira idade: "))
idade2 = int(input("Digite a segunda idade: "))
idade3 = int(input("Digite a terceira idade: "))
mediana = mediana_idades(idade1, idade2, idade3)
print(f"A idade de Camila √©: {mediana}")

def idade_voto_elei√ß√£o_presidencial(idade):
    if idade >= 16:
        return "Voc√™ pode votar."
    else:
        return "Voc√™ n√£o pode votar."

idade_eleitor = int(input("Digite a sua idade: "))
apto_para_votar = idade_voto_elei√ß√£o_presidencial(idade_eleitor)
print(apto_para_votar)

def dividir(numero,divisor):
    if divisor == 0:
        return "Erro: Divis√£o por zero n√£o √© permitida."
    else:
        return numero / divisor

sobra_divis√£o = dividir(10, 6)
print(sobra_divis√£o)



def dividir(numero,divisor):
    if divisor == 0:
        return "Erro: Divis√£o por zero n√£o √© permitida."
    else:
        return numero / divisor

sobra_divis√£o = dividir(int(input("Digite o N√∫mero a ser  divido:")), int(input("Digite o N√∫mero divisor:")))
print(sobra_divis√£o)

def dividir(numero, divisor):
    if divisor == 0:
        return "Erro: Por favor, insira valores num√©ricos v√°lidos."
    return numero / divisor

try:
    numero = float(input("Digite o n√∫mero a ser dividido: "))
    divisor = float(input("Digite o divisor: "))

    resultado = dividir(numero, divisor)
    print("Resultado da divis√£o:", resultado)
except ValueError:
    print("Erro: Por favor, insira valores num√©ricos v√°lidos.")

def dividir(numero, divisor):
    if divisor == 0:
        return "Erro: Divis√£o por zero n√£o √© permitida."
    return numero / divisor

try:
    numero = float(input("Digite o n√∫mero a ser dividido: "))
    divisor = float(input("Digite o divisor: "))

    resultado = dividir(numero, divisor)
    print("Resultado da divis√£o:", resultado)
except ValueError:
    print("Erro: Por favor, insira valores num√©ricos v√°lidos.")

def dividir(numero, divisor):
    try:
        if divisor == 0:
            raise ValueError(" Por favor, insira valores num√©ricos v√°lidos.")
        return numero / divisor
    except ValueError as sobra_divis√£o:
        return str(sobra_divis√£o)

sobra_divis√£o = dividir(10, 5)
print("A sobra da Divis√£o dessa √©:" , sobra_divis√£o)

def soma(a, b):
    return a + b

def subtracao(a, b):
    return a - b

def multiplicacao(a, b):
    return a * b

def divisao(a, b):
    if b == 0:
        raise ValueError("Erro: Divis√£o por zero n√£o √© Calcul√°vel.")
    return a / b

def calculadora():
    print("Calculadora Simples")
    print("Selecione a opera√ß√£o:")
    print("1: Adi√ß√£o")
    print("2: Subtra√ß√£o")
    print("3: Multiplica√ß√£o")
    print("4: Divis√£o")

    while True:
        try:
            operacao = input("Escolha uma opera√ß√£o (1/2/3/4): ")

            if operacao not in ['1', '2', '3', '4']:
                raise ValueError("Opera√ß√£o inv√°lida. Por favor, escolha 1, 2, 3 ou 4.")

            num1 = float(input("Digite o primeiro n√∫mero: "))
            num2 = float(input("Digite o segundo n√∫mero: "))

            if operacao == '1':
                resultado = soma(num1, num2)
                print(f"{num1} + {num2} = {resultado}")
            elif operacao == '2':
                resultado = subtracao(num1, num2)
                print(f"{num1} - {num2} = {resultado}")
            elif operacao == '3':
                resultado = multiplicacao(num1, num2)
                print(f"{num1} * {num2} = {resultado}")
            elif operacao == '4':
                resultado = divisao(num1, num2)
                print(f"{num1} / {num2} = {resultado}")

            break # Encerrar o loop ap√≥s uma opera√ß√£o bem-sucedida
        except ValueError as e:
            print(e)
            print("Tente novamente")

if __name__ == "__main__":

  calculadora()
print("Obrigado por utilizar a nossa calculadora! üòâ" )

def soma(a, b):
    return a + b

def subtracao(a, b):
    return a - b

def multiplicacao(a, b):
    return a * b

def divisao(a, b):
    if b == 0:
        raise ValueError("Erro: Divis√£o por zero n√£o √© calcul√°vel.")
    return a / b

def calculadora():
    print("Calculadora Simples")
    print("Selecione a opera√ß√£o:")
    print("1: Adi√ß√£o")
    print("2: Subtra√ß√£o")
    print("3: Multiplica√ß√£o")
    print("4: Divis√£o")

    while True:
        try:
            operacao = input("Escolha uma opera√ß√£o (1/2/3/4): ")

            if operacao not in ['1', '2', '3', '4']:
                raise ValueError("Opera√ß√£o inv√°lida. Por favor, escolha 1, 2, 3 ou 4.")

            num1 = float(input("Digite o primeiro n√∫mero: "))
            num2 = float(input("Digite o segundo n√∫mero: "))

            if operacao == '1':
                resultado = soma(num1, num2)
                print(f"O resultado da sua adi√ß√£o √©: {num1} + {num2} = {resultado}")
            elif operacao == '2':
                resultado = subtracao(num1, num2)
                print(f"O resultado da sua subtra√ß√£o √©: {num1} - {num2} = {resultado}")
            elif operacao == '3':
                resultado = multiplicacao(num1, num2)
                print(f"O resultado da sua multipli√ß√£o √©: {num1} * {num2} = {resultado}")
            elif operacao == '4':
                resultado = divisao(num1, num2)
                print(f"O resultado da sua divis√£o √©: {num1} / {num2} = {resultado}")

            break  # Encerrar o loop ap√≥s uma opera√ß√£o bem-sucedida
        except ValueError as e:
            print(e)
            print("Tente novamente")

if __name__ == "__main__":
    calculadora()
    print("Obrigado por utilizar a nossa calculadora! üòâ")

def mes_por_extenso(mes):
    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
    ]
    return meses[mes - 1] if 1 <= mes <= 12 else None

def validar_data(dia, mes, ano):
    if mes < 1 or mes > 12:
        return False
    if dia < 1 or dia > 31:
        return False
    if mes in [4, 6, 9, 11] and dia == 31:
        return False
    if mes == 2:
        if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):
            return dia <= 29  # Ano bissexto
        return dia <= 28
    return True

def data_formatada(data):
    try:
        dia, mes, ano = map(int, data.split('/'))

        if not validar_data(dia, mes, ano):
            return None

        mes_extenso = mes_por_extenso(mes)
        if mes_extenso:
            return f"{dia} de {mes_extenso} de {ano}"
        else:
            return None

    except ValueError:
        return None


data_input = "25/12/2023"
resultado = data_formatada(data_input)
if resultado:
    print(resultado)
else:
    print("Data inv√°lida")

def mes_por_extenso(mes):
    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
    ]
    return meses[mes - 1] if 1 <= mes <= 12 else None

def validar_data(dia, mes, ano):
    if mes < 1 or mes > 12:
        return False
    if dia < 1 or dia > 31:
        return False
    if mes in [4, 6, 9, 11] and dia == 31:
        return False
    if mes == 2:
        if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):
            return dia <= 29  # Ano bissexto
        return dia <= 28
    return True

def data_formatada(data):
    try:
        dia, mes, ano = map(int, data.split('/'))

        if not validar_data(dia, mes, ano):
            return None

        mes_extenso = mes_por_extenso(mes)
        if mes_extenso:
            return f"{dia} de {mes_extenso} de {ano}"
        else:
            return None

    except ValueError:
        return None

# Exemplo de uso
data_input = "25/12/2023"
resultado = data_formatada(data_input)
if resultado:
    print(resultado)  # Sa√≠da: "25 de dezembro de 2023"
else:
    print("Data inv√°lida")

def mes_por_extenso(mes):
    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
    ]
    return meses[mes - 1] if 1 <= mes <= 12 else None

def validar_data(dia, mes, ano):
    if mes < 1 or mes > 12:
        return False
    if dia < 1 or dia > 31:
        return False
    if mes in [4, 6, 9, 11] and dia == 31:
        return False
    if mes == 2 and dia > 28:
        return False  # Fevereiro sempre ter√° 28 dias

    return True

def data_formatada(data):
    try:
        dia, mes, ano = map(int, data.split('/'))

        if not validar_data(dia, mes, ano):
            return None

        mes_extenso = mes_por_extenso(mes)
        if mes_extenso:
            return f"{dia} de {mes_extenso} de {ano}"
        else:
            return None

    except ValueError:
        return None

# Exemplo de uso
data_input = "25/12/2023"
resultado = data_formatada(data_input)
if resultado:
    print(resultado)  # Sa√≠da: "25 de dezembro de 2023"
else:
    print("Data inv√°lida")

def mes_por_extenso(mes):
    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]
    return meses[mes - 1] if 1 <= mes <= 12 else None # Fixed indentation
def validar_data(dia, mes, ano):
    if mes < 1 or mes > 12:
        return False
    if dia < 1 or dia > 31:
        return False
    if mes in [4, 6, 9, 11] and dia == 31:
        return False
    if mes == 2:
        if (ano % 4 == 0 and ano % 100 !=0) or (ano % 400 == 0):
            return dia <= 29 # Ano bissexto
        return dia <= 28
    return True
def data_formatada(data):
    try:
        dia, mes, ano = map(int, data.split('/'))

        if not validar_data(dia, mes, ano):
            return None
        mes_extenso = mes_por_extenso(mes)
        if mes_extenso:
            return f"{dia} de {mes_extenso} de {ano}"
        else:
            return None
    except ValueError:
        return None
data_input = "25/12/2023"
resultado = data_formatada(data_input)
if resultado:
    print(resultado)
else:
    print("Data inv√°lida")

def mes_por_extenso(mes):
    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
    ]
    return meses[mes - 1] if 1 <= mes <= 12 else None

def validar_data(dia, mes, ano):
    if mes < 1 or mes > 12:
        return False
    if dia < 1 or dia > 31:
        return False
    if mes in [4, 6, 9, 11] and dia == 31:
        return False
    if mes == 2 and dia > 28:
        return False

    return True

def data_formatada(data):
    try:
        dia, mes, ano = map(int, data.split('/'))

        if not validar_data(dia, mes, ano):
            return None

        mes_extenso = mes_por_extenso(mes)
        if mes_extenso:
            return f"{dia} de {mes_extenso} de {ano}"
        else:
            return None

    except ValueError:
        return None


data_input = input("Digite a data no formato DD/MM/AAAA: ")
resultado = data_formatada(data_input)
if resultado:
    print(resultado)
else:
    print("Data inv√°lida")

def mes_por_extenso(mes):
    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
    ]
    return meses[mes - 1] if 1 <= mes <= 12 else None

def validar_data(dia, mes, ano):
    if mes < 1 or mes > 12:
        return False
    if dia < 1 or dia > 31:
        return False
    if mes in [4, 6, 9, 11] and dia == 31:
        return False
    if mes == 2:
        # Verifica se o ano √© bissexto
        if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):
            return dia <= 29
        return dia <= 28

    return True

def data_formatada(data):
    try:
        dia, mes, ano = map(int, data.split('/'))

        if not validar_data(dia, mes, ano):
            return None

        mes_extenso = mes_por_extenso(mes)
        if mes_extenso:
            return f"{dia} de {mes_extenso} de {ano}"
        else:
            return None

    except ValueError:
        return None

# Solicitar a entrada do usu√°rio
data_input = input("Digite a data no formato DD/MM/AAAA: ")
resultado = data_formatada(data_input)
if resultado:
    print(resultado)  # Exibe a data formatada
else:
    print("Data inv√°lida")

import random

def embaralhar_palavra(palavra, caixa='alta'):
    # Converte a palavra para caixa alta ou caixa baixa
    if caixa == 'alta':
        palavra = palavra.upper()
    else:
        palavra = palavra.lower()

    # Converte a string em uma lista de caracteres
    lista_caracteres = list(palavra)

    # Embaralha a lista de caracteres
    random.shuffle(lista_caracteres)

    # Converte a lista de volta para uma string
    return ''.join(lista_caracteres)

# Exemplo de uso
palavra_input = input("Digite uma palavra: ")
resultado = embaralhar_palavra(palavra_input, caixa='alta')  # Pode usar 'baixa' tamb√©m
print(resultado)

def embaralhar_palavra(palavra, caixa='baixa'):
    # Converte a palavra para caixa alta ou caixa baixa
    if caixa == 'alta':
        palavra = palavra.upper()
    else:
        palavra = palavra.lower()

    # Converte a string em uma lista de caracteres
    lista_caracteres = list(palavra)

    # Embaralha a lista de caracteres
    random.shuffle(lista_caracteres)

    # Converte a lista de volta para uma string
    return ''.join(lista_caracteres)

# Exemplo de uso
palavra_input = input("Digite uma palavra: ")
resultado = embaralhar_palavra(palavra_input, caixa='baixa')  # Pode usar 'baixa' tamb√©m
print(resultado)

def embaralhar_palavra(palavra, caixa='baixa'):
    # Converte a palavra para caixa alta ou caixa baixa
    if caixa == 'alta':
        palavra = palavra.upper()
    else:
        palavra = palavra.lower()

    # Converte a string em uma lista de caracteres
    lista_caracteres = list(palavra)

    # Embaralha a lista de caracteres
    random.shuffle(lista_caracteres)

    # Constr√≥i a string manualmente
    resultado = ""
    for caracter in lista_caracteres:
        resultado += caracter

    return resultado

# Exemplo de uso
palavra_input = input("Digite uma palavra: ")
resultado = embaralhar_palavra(palavra_input, caixa='baixa')  # Pode usar 'baixa' tamb√©m
print(resultado)